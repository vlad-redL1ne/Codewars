import importlib
import pytest

from asserts.asserts import assert_true
from asserts.testcase import Case

encode = importlib.import_module('katas.6kyu.Error correction #1 - Hamming Code.solution').encode
decode = importlib.import_module('katas.6kyu.Error correction #1 - Hamming Code.solution').decode

cases_encode = [
    Case('4z', '000000111111000111000000000111111111111000111000'),
    Case("hey", "000111111000111000000000000111111000000111000111000111111111111000000111"),
    Case(
        "The Sensei told me that i can do this kata",

    ),
    Case("T3st", "000111000111000111000000000000111111000000111111000111111111000000111111000111111111000111000000"),
]

cases_decode = [
    Case("100111111000111001000010000111111000000111001111000111110110111000010111", "hey"),
    Case(

        "The Sensei told me that i can do this kata",
    ),
    Case("000111000111000111000010000000111111000000111111000111111111000000111111000111111111000111010000", "T3st"),
    Case(
        "000111000111000111000001000000111111110111111111000111111111000000111111000111111111000111000000000000111000000000000111000000111000000111000111",
        "T?st!%",
    ),
    Case('000000111111000111000000000111111111111000111000', '4z'),
]


class TestSolution:
    @pytest.mark.parametrize('test', cases_encode, ids=[f'{test.test_data}' for test in cases_encode])
    def test_error_correction_1_hamming_encode(self, test):
        assert_true(encode(test.test_data), test.test_output)

    @pytest.mark.parametrize('test', cases_decode, ids=[f'{test.test_data}' for test in cases_decode])
    def test_error_correction_1_hamming_decode(self, test):
        assert_true(decode(test.test_data), test.test_output)
